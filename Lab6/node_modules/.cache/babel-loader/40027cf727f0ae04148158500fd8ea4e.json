{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { ref, getDatabase, set, update, child, get } from 'firebase/database';\nimport { useState } from \"react\"; // import {\n//   getFirestore,\n//   query,\n//   getDocs,\n//   collection,\n//   where,\n//   addDoc,\n// } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCKFsCChb9mlTV1v-NT_8FUSysj9kH3mtk\",\n  authDomain: \"autorization-350818.firebaseapp.com\",\n  projectId: \"autorization-350818\",\n  storageBucket: \"autorization-350818.appspot.com\",\n  messagingSenderId: \"490521543967\",\n  appId: \"1:490521543967:web:df9c8a794de6a1a1275c2a\",\n  measurementId: \"G-BEC80WQCVS\",\n  databaseURL: \"https://autorization-350818-default-rtdb.europe-west1.firebasedatabase.app/\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app); // const db = firebase.database();\n\nconst db = getDatabase();\nconst googleProvider = new GoogleAuthProvider();\nlet useruid = 0;\n\nconst logInWithEmailAndPassword = async (email, password, setUserData, userData) => {\n  try {\n    const res = await signInWithEmailAndPassword(auth, email, password);\n    const dbRef = ref(db);\n    let prevUserData = await get(child(dbRef, `users/${res.user.uid}`));\n    if (!prevUserData.exists()) return false;\n    let user_data = { ...prevUserData.val(),\n      last_login: Date.now()\n    }; // ref('users/' + res.user.uid).update(user_data)\n    // Write the new post's data simultaneously in the posts list and the user's post list.\n\n    const updates = {};\n    updates['users/' + res.user.uid] = user_data;\n    console.log(updates, \"Log update\");\n    update(ref(db), updates); // Firebase  .child('users/' + user.uid).update(user_data)\n\n    setUserData({\n      useruid: res.user.uid,\n      userenter: true\n    });\n    useruid = res.user.uid;\n    console.log(\"UserdataLogin\", userData);\n    alert('User Logged In!!');\n    return true;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n    return false;\n  }\n};\n\nconst GetData = async () => {\n  const dbRef = ref(db);\n  let prevUserData = await get(child(dbRef, `users/${useruid}`));\n  if (!prevUserData.exists()) return false;\n  console.log(prevUserData.val().list);\n  let res = prevUserData.val().list;\n  return res;\n};\n\n_c = GetData;\n\nconst LoadDataList = async new_list => {\n  console.log(\"pre json\", new_list);\n  let object = JSON.stringify(new_list);\n  console.log(\"new list\", new_list);\n  const dbRef = ref(db);\n  let prevUserData = await get(child(dbRef, `users/${useruid}`));\n  let user_data = { ...prevUserData.val(),\n    list: new_list\n  };\n  const updates = {};\n  console.log(\"useruid\", useruid);\n  updates['users/' + useruid] = user_data;\n  console.log(updates, \"update\");\n  update(ref(db), updates);\n};\n\n_c2 = LoadDataList;\n\nconst registerWithEmailAndPassword = async (email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    var user_data = {\n      email: email,\n      list: JSON.stringify([]),\n      last_login: Date.now()\n    };\n    set(ref(db, 'users/' + user.uid), user_data); //         database_ref.child('users/' + user.uid).set(user_data)\n\n    alert('User Created!!');\n    return true;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n    return false;\n  }\n};\n\nexport { auth, //   db,\nlogInWithEmailAndPassword, registerWithEmailAndPassword, GetData, LoadDataList };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetData\");\n$RefreshReg$(_c2, \"LoadDataList\");","map":{"version":3,"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","ref","getDatabase","set","update","child","get","useState","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","app","auth","db","googleProvider","useruid","logInWithEmailAndPassword","email","password","setUserData","userData","res","dbRef","prevUserData","user","uid","exists","user_data","val","last_login","Date","now","updates","console","log","userenter","alert","err","error","message","GetData","list","LoadDataList","new_list","object","JSON","stringify","registerWithEmailAndPassword"],"sources":["C:/Users/user/Desktop/musicplayerReact/musicplayer/src/utils/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  GoogleAuthProvider,\r\n  getAuth,\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  signOut,\r\n} from \"firebase/auth\";\r\nimport { ref, getDatabase, set, update, child, get } from 'firebase/database'\r\nimport { useState } from \"react\";\r\n// import {\r\n//   getFirestore,\r\n//   query,\r\n//   getDocs,\r\n//   collection,\r\n//   where,\r\n//   addDoc,\r\n// } from \"firebase/firestore\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCKFsCChb9mlTV1v-NT_8FUSysj9kH3mtk\",\r\n  authDomain: \"autorization-350818.firebaseapp.com\",\r\n  projectId: \"autorization-350818\",\r\n  storageBucket: \"autorization-350818.appspot.com\",\r\n  messagingSenderId: \"490521543967\",\r\n  appId: \"1:490521543967:web:df9c8a794de6a1a1275c2a\",\r\n  measurementId: \"G-BEC80WQCVS\",\r\n  databaseURL: \"https://autorization-350818-default-rtdb.europe-west1.firebasedatabase.app/\"\r\n};\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\n// const db = firebase.database();\r\nconst db = getDatabase();\r\nconst googleProvider = new GoogleAuthProvider();\r\nlet useruid=0;\r\n\r\n\r\n\r\nconst logInWithEmailAndPassword = async (email, password, setUserData, userData) => {\r\n  try {\r\n    const res = await signInWithEmailAndPassword(auth, email, password);\r\n    const dbRef = ref(db);\r\n    let prevUserData = await get(child(dbRef, `users/${res.user.uid}`))\r\n    if (!prevUserData.exists())\r\n      return false;\r\n    let user_data = {\r\n      ...prevUserData.val(),\r\n      last_login: Date.now()\r\n    }\r\n    // ref('users/' + res.user.uid).update(user_data)\r\n\r\n    // Write the new post's data simultaneously in the posts list and the user's post list.\r\n    const updates = {};\r\n    updates['users/' + res.user.uid] = user_data;\r\n    console.log(updates, \"Log update\")\r\n\r\n    update(ref(db), updates);\r\n\r\n    // Firebase  .child('users/' + user.uid).update(user_data)\r\n    setUserData({ useruid: res.user.uid, userenter: true })\r\n    useruid=res.user.uid;\r\n    console.log(\"UserdataLogin\", userData);\r\n    alert('User Logged In!!')\r\n    return true;\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst GetData = async () => {\r\n  const dbRef = ref(db);\r\n  let prevUserData = await get(child(dbRef, `users/${useruid}`))\r\n  if (!prevUserData.exists())\r\n    return false;\r\n  console.log(prevUserData.val().list);\r\n  let res=prevUserData.val().list;\r\n  return  res;\r\n};\r\n\r\nconst LoadDataList = async (new_list) =>{\r\n  console.log(\"pre json\", new_list);\r\n  let object=JSON.stringify(new_list);\r\n  console.log(\"new list\", new_list);\r\n  const dbRef = ref(db);\r\n  let prevUserData = await get(child(dbRef, `users/${useruid}`));\r\n  let user_data = {\r\n    ...prevUserData.val(),\r\n    list: new_list\r\n  }\r\n  const updates = {};\r\n  console.log(\"useruid\", useruid)\r\n  updates['users/' + useruid] = user_data;\r\n  console.log(updates, \"update\")\r\n  update(ref(db), updates);\r\n\r\n}\r\n\r\n\r\nconst registerWithEmailAndPassword = async (email, password) => {\r\n  try {\r\n    const res = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = res.user;\r\n    var user_data = {\r\n      email: email,\r\n      list: JSON.stringify([]),\r\n      last_login: Date.now()\r\n    }\r\n    set(ref(db, 'users/' + user.uid), user_data);\r\n    //         database_ref.child('users/' + user.uid).set(user_data)\r\n    alert('User Created!!')\r\n    return true;\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport {\r\n  auth,\r\n  //   db,\r\n  logInWithEmailAndPassword,\r\n  registerWithEmailAndPassword,\r\n  GetData,\r\n  LoadDataList \r\n};\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}